#lang racket
(require rackunit
         rackunit/text-ui)

; 快速排序算法实现
(define (quicksort lst)
  (cond
    [(or (null? lst) (<= (length lst) 1)) lst]
    [else
     (let* ([pivot (car lst)]
            [rest (cdr lst)]
            [less (filter (lambda (x) (< x pivot)) rest)]
            [greater (filter (lambda (x) (>= x pivot)) rest)])
       (append (quicksort less) (list pivot) (quicksort greater)))]))

; 使用 RackUnit 定义测试套件
(define quicksort-tests
  (test-suite
   "Quicksort Tests"
   
   (test-case "Test 1: Mixed numbers with duplicates"
     (check-equal? (quicksort '(3 1 4 1 5 9 2 6 5 3 5)) 
                   '(1 1 2 3 3 4 5 5 5 6 9)))
   
   (test-case "Test 2: Reverse sorted list"
     (check-equal? (quicksort '(5 4 3 2 1)) 
                   '(1 2 3 4 5)))
   
   (test-case "Test 3: Empty list"
     (check-equal? (quicksort '()) 
                   '()))
   
   (test-case "Test 4: Single element"
     (check-equal? (quicksort '(1)) 
                   '(1)))))

; 运行测试
(run-tests quicksort-tests)
