fn quicksort(list: Vec<i32>) -> Vec<i32> {
    if list.len() <= 1 {
        return list;
    }
    
    let pivot = list[0];
    let rest: Vec<i32> = list[1..].to_vec();
    let less: Vec<i32> = rest.iter().filter(|&&x| x < pivot).cloned().collect();
    let greater: Vec<i32> = rest.iter().filter(|&&x| x >= pivot).cloned().collect();
    
    let mut result = quicksort(less);
    result.push(pivot);
    result.extend(quicksort(greater));
    result
}

fn check_quicksort() {
    assert_eq!(quicksort(vec![3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]), vec![1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]);
    assert_eq!(quicksort(vec![5, 4, 3, 2, 1]), vec![1, 2, 3, 4, 5]);
    assert_eq!(quicksort(vec![]), vec![]);
    assert_eq!(quicksort(vec![1]), vec![1]);
}

fn main() {
    check_quicksort();
}
