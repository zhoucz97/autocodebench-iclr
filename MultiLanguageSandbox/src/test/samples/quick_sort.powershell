function Quicksort {
    param($list)
    
    if ($null -eq $list -or $list.Count -le 1) {
        if ($null -eq $list) {
            return @()
        }
        return $list
    }
    
    $pivot = $list[0]
    $rest = $list[1..($list.Count - 1)]
    $less = $rest | Where-Object { $_ -lt $pivot }
    $greater = $rest | Where-Object { $_ -ge $pivot }
    
    $sortedLess = Quicksort $less
    $sortedGreater = Quicksort $greater
    
    return @($sortedLess) + @($pivot) + @($sortedGreater)
}

function Compare-Arrays {
    param($a, $b)
    
    if ($a.Count -ne $b.Count) {
        return $false
    }
    
    for ($i = 0; $i -lt $a.Count; $i++) {
        if ($a[$i] -ne $b[$i]) {
            return $false
        }
    }
    
    return $true
}

function CheckQuicksort {
    $result1 = Quicksort @(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)
    $expected1 = @(1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9)
    if (-not (Compare-Arrays $result1 $expected1)) {
        throw "Test 1 failed"
    }
    
    $result2 = Quicksort @(5, 4, 3, 2, 1)
    $expected2 = @(1, 2, 3, 4, 5)
    if (-not (Compare-Arrays $result2 $expected2)) {
        throw "Test 2 failed"
    }
    
    $result3 = Quicksort @()
    $expected3 = @()
    if (-not (Compare-Arrays $result3 $expected3)) {
        throw "Test 3 failed"
    }
    
    $result4 = Quicksort @(1)
    $expected4 = @(1)
    if (-not (Compare-Arrays $result4 $expected4)) {
        throw "Test 4 failed"
    }
}

CheckQuicksort
