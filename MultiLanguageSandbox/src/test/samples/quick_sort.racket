#lang racket

(define (quicksort lst)
  (cond
    [(or (null? lst) (<= (length lst) 1)) lst]
    [else
     (let* ([pivot (car lst)]
            [rest (cdr lst)]
            [less (filter (lambda (x) (< x pivot)) rest)]
            [greater (filter (lambda (x) (>= x pivot)) rest)])
       (append (quicksort less) (list pivot) (quicksort greater)))]))

(define (check-quicksort)
  (unless (equal? (quicksort '(3 1 4 1 5 9 2 6 5 3 5)) '(1 1 2 3 3 4 5 5 5 6 9))
    (error "Test 1 failed"))
  (unless (equal? (quicksort '(5 4 3 2 1)) '(1 2 3 4 5))
    (error "Test 2 failed"))
  (unless (equal? (quicksort '()) '())
    (error "Test 3 failed"))
  (unless (equal? (quicksort '(1)) '(1))
    (error "Test 4 failed")))

(check-quicksort)
