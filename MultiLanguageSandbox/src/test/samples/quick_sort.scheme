#lang racket
(require rackunit)

(define (quicksort lst)
  (cond
    ((null? lst) '())
    ((<= (length lst) 1) lst)
    (else
     (let* ((pivot (car lst))
            (rest (cdr lst))
            (less (filter (lambda (x) (< x pivot)) rest))
            (greater (filter (lambda (x) (>= x pivot)) rest)))
       (append (quicksort less) (list pivot) (quicksort greater))))))

(define (check quicksort)
  (check-equal? (quicksort '(3 1 4 1 5 9 2 6 5 3 5)) '(1 1 2 3 3 4 5 5 5 6 9))
  (check-equal? (quicksort '(5 4 3 2 1)) '(1 2 3 4 5))
  (check-equal? (quicksort '()) '())
  (check-equal? (quicksort '(1)) '(1)))

(check quicksort)
