defmodule QuickSort do
  def quicksort(list) when list == nil or length(list) <= 1 do
    list || []
  end

  def quicksort([pivot | rest]) do
    less = Enum.filter(rest, fn x -> x < pivot end)
    greater = Enum.filter(rest, fn x -> x >= pivot end)

    quicksort(less) ++ [pivot] ++ quicksort(greater)
  end
end

ExUnit.start()

defmodule QuickSortTest do
  use ExUnit.Case

  test "check quicksort" do
    assert QuickSort.quicksort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 
           [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
    assert QuickSort.quicksort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]
    assert QuickSort.quicksort([]) == []
    assert QuickSort.quicksort([1]) == [1]
  end
end
