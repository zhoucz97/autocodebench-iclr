module quicksort_module
contains
    recursive function quicksort(list) result(sorted)
        integer, dimension(:), intent(in) :: list
        integer, dimension(:), allocatable :: sorted
        integer, dimension(:), allocatable :: less, greater
        integer :: pivot

        if (size(list) <= 1) then
            sorted = list
            return
        end if

        pivot = list(1)
        less = pack(list(2:), list(2:) < pivot)
        greater = pack(list(2:), list(2:) >= pivot)

        sorted = [quicksort(less), pivot, quicksort(greater)]
    end function quicksort

    subroutine assert(condition)
        logical, intent(in) :: condition
        if (.not. condition) then
            print *, 'Assertion failed'
            stop
        end if
    end subroutine assert

    subroutine checkQuicksort()
        integer, dimension(:), allocatable :: result

        result = quicksort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])
        call assert(all(result == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]))

        result = quicksort([5, 4, 3, 2, 1])
        call assert(all(result == [1, 2, 3, 4, 5]))

        result = quicksort([1])
        call assert(all(result == [1]))

        if (allocated(result)) deallocate(result)
        allocate(result(0))
        result = quicksort(result)
        call assert(size(result) == 0)
    end subroutine checkQuicksort
end module quicksort_module

program quicksort_program
    use quicksort_module
    implicit none

    call checkQuicksort()
end program quicksort_program
