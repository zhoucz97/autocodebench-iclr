quicksort :: [Int] -> [Int]
quicksort [] = []
quicksort (pivot:rest) =
    let less = filter (< pivot) rest
        greater = filter (>= pivot) rest
    in quicksort less ++ [pivot] ++ quicksort greater

checkQuicksort :: ([Int] -> [Int]) -> IO ()
checkQuicksort quicksortFunc = do
    let testCases =
            [ ([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]),
              ([5, 4, 3, 2, 1], [1, 2, 3, 4, 5]),
              ([], []),
              ([1], [1])
            ]

    mapM_ (uncurry testCase) testCases
  where
    testCase input expected = do
      let result = quicksortFunc input
      putStrLn $
        "Input: " ++ show input ++
        ", Expected: " ++ show expected ++ ", Result: " ++ show result ++
        if result == expected then " (Pass)" else " (Fail)"

main :: IO ()
main = checkQuicksort quicksort
