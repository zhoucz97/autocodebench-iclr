(defun calculate-table-tennis-scores (record)
  (let ((score11 (list))
        (score21 (list))
        (player11 0)
        (opponent11 0)
        (player21 0)
        (opponent21 0)
        (game-over11 nil)
        (game-over21 nil))
    (loop for char across record
          while (not (char= char #\E))
          do (cond ((char= char #\W)
                    (incf player11)
                    (incf player21)
                    (when (or (and (>= player11 11) (>= (- player11 opponent11) 2))
                              (>= player11 21))
                      (push (format nil "~a:~a" player11 opponent11) score11)
                      (setf game-over11 t))
                    (when (or (and (>= player21 21) (>= (- player21 opponent21) 2))
                              (>= player21 40))
                      (push (format nil "~a:~a" player21 opponent21) score21)
                      (setf game-over21 t)))
                 ((char= char #\L)
                  (incf opponent11)
                  (incf opponent21)
                  (when (or (and (>= opponent11 11) (>= (- opponent11 player11) 2))
                            (>= opponent11 21))
                    (push (format nil "~a:~a" player11 opponent11) score11)
                    (setf game-over11 t))
                  (when (or (and (>= opponent21 21) (>= (- opponent21 player21) 2))
                            (>= opponent21 40))
                    (push (format nil "~a:~a" player21 opponent21) score21)
                    (setf game-over21 t)))
                 (t nil))
          when (or game-over11 game-over21)
            do (progn
                 (when game-over11
                   (setf player11 0 opponent11 0 game-over11 nil))
                 (when game-over21
                   (setf player21 0 opponent21 0 game-over21 nil))))
    (list (reverse score11) (reverse score21))))


(defun test-calculate-table-tennis-scores ()
(assert (equal (calculate-table-tennis-scores "WWLLWE") '(("3:2") ("3:2"))))
(assert (equal (calculate-table-tennis-scores "WWWWWWWWWWWWLWE") '(("11:0" "2:1") ("13:1"))))
(assert (equal (calculate-table-tennis-scores "WLWLWLWLWLE") '(("5:5") ("5:5"))))
(assert (equal (calculate-table-tennis-scores "LWE") '(("1:1") ("1:1")))))

(test-calculate-table-tennis-scores)