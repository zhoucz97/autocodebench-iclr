#lang racket
(require rackunit)

(define (find-optimal-meeting-place city-data)
  (let* ((cities (map (lambda (x) (list (third x) (second x) (first x))) city-data))
         (total-costs (map (lambda (city)
                             (let ((city-name (first city))
                                   (city-dist (second city))
                                   (city-count (third city)))
                               (let loop ((remaining-cities cities)
                                          (total 0))
                                 (if (null? remaining-cities)
                                     total
                                     (let* ((current (car remaining-cities))
                                            (current-name (first current))
                                            (current-dist (second current))
                                            (current-count (third current))
                                            (distance (abs (- city-dist current-dist))))
                                       (if (equal? current-name city-name)
                                           (loop (cdr remaining-cities) total)
                                           (loop (cdr remaining-cities) (+ total (* current-count distance)))))))))
                           cities))
         (min-cost (apply min total-costs))
         (candidates (filter (lambda (x) (= (cadr x) min-cost)) (map list (map first cities) total-costs)))
         (optimal (if (> (length candidates) 1)
                      (let ((sorted (sort candidates (lambda (a b) (< (cadr a) (cadr b))))))
                        (car sorted))
                      (car candidates))))
    (list (car optimal) min-cost)))


(define (check find-optimal-meeting-place)
(define tests
(list (check-equal? (find-optimal-meeting-place '((7 9289 "Vladivostok")
(5 8523 "Chabarovsk")
(3 5184 "Irkutsk")
(8 2213 "Yalutorovsk")
(10 0 "Moscow"))) 
'("Yalutorovsk" 112125))
(check-equal? (find-optimal-meeting-place '((5 300 "CityA")
(3 100 "CityB")
(2 0 "Moscow"))) 
'("CityB" 1200))
(check-equal? (find-optimal-meeting-place '((4 200 "CityX")
(6 400 "CityY")
(1 0 "Moscow"))) 
'("CityY" 1200))))
(andmap identity tests))

(check find-optimal-meeting-place)