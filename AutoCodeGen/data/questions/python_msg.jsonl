{"index": 0, "seed": "def add_two_numbers(a, b):\n    return a + b", "canonical_solution": "```python\nimport math\n\ndef calculate_vector_magnitude(vector):\n    \"\"\"\n    Calculates the magnitude (length) of a vector in n-dimensional space.\n    \n    Args:\n        vector: A list of numerical values representing the vector components.\n    \n    Returns:\n        float: The magnitude of the vector.\n    \n    Raises:\n        ValueError: If input is not a list or contains non-numeric values.\n    \"\"\"\n    if not isinstance(vector, list):\n        raise ValueError(\"Input must be a list\")\n    \n    if not all(isinstance(x, (int, float)) for x in vector):\n        raise ValueError(\"All vector components must be numeric\")\n    \n    if len(vector) == 0:\n        return 0.0\n    \n    squared_sum = sum(x**2 for x in vector)\n    return math.sqrt(squared_sum)\n```", "language": "python", "demo_test_func": "def test():\n    assert calculate_vector_magnitude([3, 4]) == 5.0\n    assert calculate_vector_magnitude([1, 2, 2]) == 3.0\n\nif __name__ == \"__main__\":\n    test()", "full_test_func": "def test():\n    # Basic cases\n    assert calculate_vector_magnitude([3, 4]) == 5.0\n    assert calculate_vector_magnitude([1, 2, 2]) == 3.0\n    # Edge cases\n    assert calculate_vector_magnitude([]) == 0.0\n    assert calculate_vector_magnitude([5]) == 5.0\n    assert calculate_vector_magnitude([-3, -4]) == 5.0\n    assert calculate_vector_magnitude([0, 0, 0]) == 0.0\n    # High-dimensional and floating-point cases\n    assert calculate_vector_magnitude([1, 1, 1, 1, 1]) == 2.23606797749979\n    assert calculate_vector_magnitude([1000000, 1000000]) == 1414213.562373095\n    assert calculate_vector_magnitude([0.3, 0.4]) == 0.5\n    # Error cases\n    try:\n        calculate_vector_magnitude(\"not a vector\")\n        assert False, \"Expected ValueError for non-list input\"\n    except ValueError as e:\n        assert str(e) == \"Input must be a list\"\n    try:\n        calculate_vector_magnitude([1, 'a', 3])\n        assert False, \"Expected ValueError for non-numeric element\"\n    except ValueError as e:\n        assert str(e) == \"All vector components must be numeric\"\n\nif __name__ == \"__main__\":\n    test()", "messages": [{"role": "system", "content": ""}, {"role": "user", "content": "You are an experienced programming tutor, adept at crafting **clear, concise, and educational programming problems**. I will supply you with a **self-contained, executable, and correct Python code**, along with one or more test functions designed to verify its correctness. Your task is to **generate a programming problem that directly corresponds to the given Python code and its test cases**.\n\nHere is the code and test functions:\n[Python code]\n<<<code>>>\n[Python code end]\n\n[test function demo]\ndef test():\n    assert calculate_vector_magnitude([3, 4]) == 5.0\n    assert calculate_vector_magnitude([1, 2, 2]) == 3.0\n\nif __name__ == \"__main__\":\n    test()\n[test function demo end]\n\n[test function]\ndef test():\n    # Basic cases\n    assert calculate_vector_magnitude([3, 4]) == 5.0\n    assert calculate_vector_magnitude([1, 2, 2]) == 3.0\n    # Edge cases\n    assert calculate_vector_magnitude([]) == 0.0\n    assert calculate_vector_magnitude([5]) == 5.0\n    assert calculate_vector_magnitude([-3, -4]) == 5.0\n    assert calculate_vector_magnitude([0, 0, 0]) == 0.0\n    # High-dimensional and floating-point cases\n    assert calculate_vector_magnitude([1, 1, 1, 1, 1]) == 2.23606797749979\n    assert calculate_vector_magnitude([1000000, 1000000]) == 1414213.562373095\n    assert calculate_vector_magnitude([0.3, 0.4]) == 0.5\n    # Error cases\n    try:\n        calculate_vector_magnitude(\"not a vector\")\n        assert False, \"Expected ValueError for non-list input\"\n    except ValueError as e:\n        assert str(e) == \"Input must be a list\"\n    try:\n        calculate_vector_magnitude([1, 'a', 3])\n        assert False, \"Expected ValueError for non-numeric element\"\n    except ValueError as e:\n        assert str(e) == \"All vector components must be numeric\"\n\nif __name__ == \"__main__\":\n    test()\n[test function end]\n\n\nPlease ensure the problem you generate adheres to the following critical requirements:\n1. Language Specification: Explicitly state that solutions must be implemented in ​Python.\n2. Problem Description: Describe the problem ​concisely and unambiguously​ using plain language. Avoid technical jargon, unnecessary details, or solution hints.\n3. Function/Class Naming: Only mention the ​exact function or class names​ used in the test functions. Do ​not​ include implementation-specific details beyond what’s in the tests.\n4. ​Input/Output Format: Define the ​input format​ (types, structure, value ranges). Define the ​expected output format. If necessary, specify some constraints​ (e.g., input size limits, allowed data types).\n5. Example Usage: Use the test case in the aforementioned 'test function demo' to construct example usage. The number of test cases in this is usually no more than three. Do ​not​ modify or explain the test cases—just copy them verbatim.\n6. No Solution Hints: The problem description ​must not​ reveal any code solution and any \ntest cases beyond what’s in the provided examples.\n\n\nPlease enclose the generated programming problem within <question> and </question> tags.\n"}]}
