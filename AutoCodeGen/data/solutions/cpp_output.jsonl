{"messages": [{"role": "system", "content": ""}, {"role": "user", "content": "# Code Benchmark Construction Task\n*In order to build the code benchmark, I need you to help me create a Cpp function, as well as two test functions.*\n\n## Task Overview\nGiven a code file or code snippet in any programming language, your task is to **evolve and expand its core logic** to create a **self-contained**, **verifiable**, and **more challenging** Cpp function. You also need to create two testing functions for testing: `demo_testing()` and `full_testing()`. Below are the detailed requirements:\n\n1. **Separate Code Blocks**: \n   - Provide **three distinct code blocks**:\n     - One block for the rewritten Cpp functions that contain the core logic.\n     - Two blocks for the test functions (`demo_testing()` and `full_testing()`).\n   - The three code blocks are wrapped with ```cpp and ```.\n\n2. **Test Code in `demo_testing()`**: \n   - This function should contain **no more than 2 test cases**. It will be used to **demonstrate** the input-output format.\n   - For each test case, **hard-code the input values** and print both the input and the corresponding output when `demo_testing()` is executed.\n   - Avoid edge cases in this function, and focus on basic test cases for demonstration purposes.\n\n3. **Test Code in `full_testing()`**: \n   - This function should include a comprehensive set of **at least 7 test cases**.\n   - These test cases should be designed to thoroughly test the functionality of the converted functions, including:\n     - **Basic cases** (e.g., test cases used in `demo_testing()`).\n     - **Boundary cases** (e.g., minimum/maximum values, empty inputs).\n     - **Edge cases** that test the robustness of the code (e.g., abnormal value, boundary condition checks).\n   - For each test case, **hard-code the input values** and print both the input and the corresponding output when `full_testing()` is executed.\n   - The goal of the test function is to provide comprehensive inputs and call the function being tested to obtain the output. Input handling (e.g., validation, edge cases) should be done by the function itself, not the test.\n\n4. **Use Standard and Third-Party Cpp Libraries**: \n   - You are allowed to use standard Cpp libraries (e.g., `stdio`, `stdlib`) and third-party libraries (if required) for implementing the core logic.\n   - Ensure that all dependencies are clearly explained in the comments if used.\n\n5. **Executable Code**:\n   - Provide **self-contained and executable Cpp code** with hard-coded test inputs.\n   - Remove any non-core logic such as plots, file I/O, and unused functions. \n   - If the original code is not directly executable (e.g., due to dependency on specific business logic or external systems), adapt the code to a self-contained, testable form by simulating the required context or simplifying the logic while preserving the core functionality.\n   - The code must have a sufficient level of complexity. For basic examples (like a function that simply adds two numbers), you should enhance it to include greater complexity and make it more challenging.\n\n6. **Code Style and Naming**:\n   - Follow **Cpp** naming conventions and ensure that function names are **descriptive** and **clear** in conveying their purpose.\n   - Provide **clear and concise comments** explaining the core logic and the purpose of each function, especially the key steps.\n\n\n## Output Requirements  \n\n### 1. Converted Cpp Functions\n- **Dependencies**: Use standard Cpp libraries (e.g., stdio) and third-party libraries when necessary.\n- **Adaptation for Executability**: If the original code depends on external data sources or specific business workflows, modify it to be self-contained by hardcoding inputs, simulating dependencies, or simplifying the logic, while preserving the core algorithm.\n- **Remove Non-Core Logic**: Eliminate all non-essential parts such as plots, file I/O, and unused functions.\n- **Code Style**: Follow good Cpp coding practices, including proper indentation, consistent naming conventions, and adherence to PEP 8 guidelines. Add comments to explain the functionality of the code and clarify key steps.\n- **Not to stick to one pattern**: Not bound by the logic of the given code snippet. Carrying out evolution and expansion makes the code more challenging.\n\n\n### 2. Executable Test Functions\n- **Function Names**: Use `demo_testing()` and `full_testing()` for the test functions.\n- **Inputs**: Hardcode the test inputs within the test functions. Do not pass parameters into the `demo_testing()` or `full_testing()` functions.\n- **Output**: Directly print the test inputs and their corresponding outputs to the console. Ensure that outputs are in JSON-serializable types (e.g., strings, integers, floats, lists). Do not include the word \"Output\" in the printed results.\n- **Dependencies**: Use standard Cpp libraries (e.g., stdio, stdlib) and third-party libraries, if needed, for the core logic.\n- **Testing Adaptation**: If the original code's logic is part of a larger system, adapt the `demo_testing()` and `full_testing()` functions to create a self-contained testing environment. This may include initializing necessary objects, setting up test data, or mocking external interactions.\n- **Code Style**: Follow good Cpp code style in the test functions, with proper indentation and clarity. Include comments to explain the test setup and key steps in the testing process.\n- **Test Function Format**: The structure and format of `demo_testing()` and `full_testing()` should be identical, with the only difference being the number of test cases.\n\n### 3. Code Structure  \n```cpp  \n// Converted cpp functions\n#include <vector>\n#include <iostream>\nusing namespace std;\n#include <third_party_library.h> // Example: If third - party libraries are needed  \n\n// 计算给定数据列表的平均值\n// 如果列表为空，返回0.0以避免除零错误\ndouble calculate_average(const vector<double>& data) {\n    if (data.empty()) {\n        return 0.0;\n    }\n    double total = 0.0;\n    for (double value : data) {\n        total += value;\n    }\n    return total / data.size();\n}\n```\n\n```cpp  \n// demo_testing function \n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid demo_testing() {\n    // 硬编码测试输入。我们创建一个不超过2个测试用例的列表，其中每个测试用例\n    // 本身是一个用于测试calculate_average函数的数字列表。\n    vector<vector<int>> test_cases = {\n        {1, 2, 3}\n    };\n\n    for (const auto& input_data : test_cases) {\n        // 打印当前测试用例的输入数据\n        cout << \"Input: [\";\n        for (size_t i = 0; i < input_data.size(); ++i) {\n            cout << input_data[i];\n            if (i < input_data.size() - 1) {\n                cout << \", \";\n            }\n        }\n        cout << \"]\" << endl;\n\n        // 使用当前输入数据调用calculate_average函数\n        double result = calculate_average(input_data);\n\n        // 打印当前测试用例计算的结果（平均值）\n        cout << \"Mean: \" << result << endl;\n    }\n}\n\nint main() {\n    demo_testing();\n    return 0;\n}\n```\n\n```cpp  \n// full_testing function \n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid full_testing() {\n    // 硬编码测试输入。我们创建一个至少包含7个测试用例的列表，其中每个测试用例\n    // 本身是一个用于测试calculate_average函数的数字列表。\n    vector<vector<double>> test_cases = {\n        {1, 2, 3},\n        {12, 45, 6, 89, 34},\n        {},  // 空向量测试用例\n        {5},  // 单元素测试用例\n        {-2, 4, -6, 8},  // 负数测试用例\n        {0},\n        {999, 999999999, 999999999},  // 极值测试用例\n        {0.5, 9.8, -9.2, 25365423435.0}  // 小数测试用例\n    };\n\n\n    for (const auto& input_data : test_cases) {\n        // 打印当前测试用例的输入数据\n        cout << \"Input: [\";\n        for (size_t i = 0; i < input_data.size(); ++i) {\n            cout << input_data[i];\n            if (i < input_data.size() - 1) {\n                cout << \", \";\n            }\n        }\n        cout << \"]\" << endl;\n\n        // 使用当前输入数据调用calculate_average函数\n        double result = calculate_average(input_data);\n\n        // 打印当前测试用例计算的结果（平均值）\n        cout << \"Mean: \" << result << endl << endl;\n    }\n}\n\nint main() {\n    full_testing();\n    return 0;\n}\n```  \n\n#### 3. Key Rules  \n- **No external inputs**: All test parameters should be hard-coded in the demo_testing or full_testing function.  \n- **No complex types**: Use lists for arrays and primitive types for scalars. \n- **No exception handling**: Do not generate code to catch the exception. (i.e. do not use \"try\" \"catch\"). \n- **No boilerplate**: Remove comments, unused code, and non-essential logic from the original code (but add appropriate comments in the generated Cpp code as per the requirements).\n- **No randomness**: The code must not rely on any random values or functions. Ensure that all inputs and outputs are predictable and consistent every time the code is executed.\n- **Direct execution**:  The code must be able to be directly compiled into a main executable program and run as \"./main\".\n\n\n### Example Conversion  \n**Original Code** (in any programming language, here a hypothetical example using Pandas):  \n```python\nimport pandas as pd  \ndef analyze_data(df):  \n    return df.mean(), df.std()  \ndata = pd.DataFrame([1, 2, 3, 4])  \nprint(analyze_data(data))  # Output: (2.5, 1.118...)  \n```  \n\n**Converted Cpp Code** (**evolving and expanding** the core logic):  \n```cpp  \n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <stdexcept>\n#include <map>\n\nusing namespace std;\n\n// 函数用于对向量进行多种统计分析\nmap<string, double> analyze_data(const vector<double>& data) {\n    // 检查向量是否为空\n    if (data.empty()) {\n        throw invalid_argument(\"Error: Empty DataFrame\");\n    }\n\n    // 计算总和\n    double sum = 0.0;\n    for (double value : data) {\n        sum += value;\n    }\n\n    // 计算均值\n    double mean = sum / data.size();\n\n    // 计算方差和标准差\n    double variance = 0.0;\n    for (double value : data) {\n        variance += pow(value - mean, 2);\n    }\n    variance /= data.size() - 1; // 无偏估计\n    double std_dev = sqrt(variance);\n\n    // 计算中位数\n    vector<double> sorted_data = data;\n    sort(sorted_data.begin(), sorted_data.end());\n    double median;\n    if (sorted_data.size() % 2 == 0) {\n        median = (sorted_data[sorted_data.size()/2 - 1] + sorted_data[sorted_data.size()/2]) / 2;\n    } else {\n        median = sorted_data[sorted_data.size()/2];\n    }\n\n    // 检测离群值（超过均值2个标准差）\n    vector<double> outliers;\n    for (double value : data) {\n        if (abs(value - mean) > 2 * std_dev) {\n            outliers.push_back(value);\n        }\n    }\n\n    // 返回结果字典\n    map<string, double> results;\n    results[\"mean\"] = mean;\n    results[\"std_dev\"] = std_dev;\n    results[\"median\"] = median;\n    results[\"variance\"] = variance;\n    // 注意：C++ map要求所有值类型一致，因此outliers无法直接包含在这里\n    \n    return results;\n}\n\n```  \n\n**Demo Testing Function** (Adapted to create DataFrames in-memory):  \n```cpp  \n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\n\nvoid demo_testing() {\n    vector<vector<double>> test_cases = {\n        {1, 2, 3, 4}\n    };\n\n    for (const auto& input_data : test_cases) {\n        // 模拟DataFrame输出格式\n        cout << \"Input:\" << endl;\n        cout << \"+---+--------+\" << endl;\n        cout << \"|   |   0    |\" << endl;\n        cout << \"+---+--------+\" << endl;\n        for (size_t i = 0; i < input_data.size(); ++i) {\n            cout << \"| \" << i << \" | \" \n                 << setw(6) << input_data[i] << \" |\" << endl;\n        }\n        cout << \"+---+--------+\" << endl;\n\n        map<string, double> result = analyze_data(input_data);\n\n        // 优化结果输出格式\n        cout << \"Analysis Result:\" << endl;\n        cout << \"+------------+-----------+\" << endl;\n        cout << \"| Statistic  |   Value   |\" << endl;\n        cout << \"+------------+-----------+\" << endl;\n        for (const auto& pair : result) {\n            cout << \"| \" << left << setw(10) << pair.first \n                    << \" | \" << right << setw(9) << pair.second << \" |\" << endl;\n        }\n        cout << \"+------------+-----------+\" << endl;\n        \n        cout << endl;\n    }\n}\n\nint main() {\n    demo_testing();\n    return 0;\n}\n```\n\n**Full Testing Function** (Adapted to create DataFrames in-memory):  \n```cpp\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\n\nvoid full_testing() {\n    // 硬编码测试用例集合\n    vector<vector<double>> test_cases = {\n        {1, 2, 3, 4},                 // 测试用例1：简单数字序列\n        {12, 45, 6, 89, 34},          // 测试用例2：更多数字\n        {5},                          // 测试用例3：单个值\n        {},                           // 测试用例4：空DataFrame\n        {1, -1, 1, -1},               // 测试用例5：正负混合\n        {0, 0, 0, 0},                 // 测试用例6：全零\n        {999999, 1000000, 1000001},  // 测试用例7：大数\n        {100, 200, 300, 400}         // 测试用例8：更大的数字集\n    };\n\n    // 设置输出精度\n    cout << fixed << setprecision(6);\n\n    for (size_t i = 0; i < test_cases.size(); ++i) {\n        const auto& input_data = test_cases[i];\n        \n        // 打印测试用例编号\n        cout << \"Test Case \" << (i + 1) << \":\" << endl;\n        \n        // 模拟DataFrame输出格式\n        cout << \"Input:\" << endl;\n        cout << \"+---+--------+\" << endl;\n        cout << \"|   |   0    |\" << endl;\n        cout << \"+---+--------+\" << endl;\n        for (size_t j = 0; j < input_data.size(); ++j) {\n            cout << \"| \" << j << \" | \" \n                 << setw(6) << input_data[j] << \" |\" << endl;\n        }\n        cout << \"+---+--------+\" << endl;\n\n        // 调用分析函数\n        map<string, double> result = analyze_data(input_data);\n\n        // 输出分析结果\n        cout << \"Analysis Result:\" << endl;\n        cout << \"+------------+-----------+\" << endl;\n        cout << \"| Statistic  |   Value   |\" << endl;\n        cout << \"+------------+-----------+\" << endl;\n        for (const auto& pair : result) {\n            cout << \"| \" << left << setw(10) << pair.first \n                    << \" | \" << right << setw(9) << pair.second << \" |\" << endl;\n        }\n        cout << endl; // 分隔不同测试用例\n    }\n\n}\n\nint main() {\n    full_testing();\n    return 0;\n}\n\n```  \n\n\n\nHere is the code file you need to process:\n[Code Start]\n#include <iostream>\nusing namespace std;\n\nint add_two_numbers(int a, int b) {\n    return a + b;\n}\n[Code End]"}], "index": 0, "lang": "cpp", "seed": "#include <iostream>\nusing namespace std;\n\nint add_two_numbers(int a, int b) {\n    return a + b;\n}", "output": "### Converted C++ Functions\n```cpp\n#include <iostream>\n#include <map>\n#include <cmath>\n#include <vector>\n#include <stdexcept>\nusing namespace std;\n\nmap<string, double> compute_operations(int a, int b) {\n    map<string, double> results;\n    results[\"addition\"] = a + b;\n    results[\"subtraction\"] = a - b;\n    results[\"multiplication\"] = a * b;\n    \n    if (b != 0) {\n        results[\"division\"] = static_cast<double>(a) / b;\n        results[\"modulo\"] = a % b;\n    } else {\n        results[\"division\"] = NAN;\n        results[\"modulo\"] = NAN;\n    }\n    \n    return results;\n}\n```\n\n### Demo Testing Function\n```cpp\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cmath>\nusing namespace std;\n\nvoid demo_testing() {\n    vector<pair<int, int>> test_cases = {\n        {10, 5},\n        {5, 0}\n    };\n\n    for (const auto& test : test_cases) {\n        int a = test.first;\n        int b = test.second;\n        cout << \"Input: a = \" << a << \", b = \" << b << endl;\n        map<string, double> result = compute_operations(a, b);\n        \n        cout << \"{\";\n        bool first = true;\n        for (const auto& pair : result) {\n            if (!first) cout << \", \";\n            cout << \"\\\"\" << pair.first << \"\\\": \";\n            if (isnan(pair.second)) cout << \"NaN\";\n            else cout << pair.second;\n            first = false;\n        }\n        cout << \"}\" << endl;\n    }\n}\n\nint main() {\n    demo_testing();\n    return 0;\n}\n```\n\n### Full Testing Function\n```cpp\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cmath>\nusing namespace std;\n\nvoid full_testing() {\n    vector<pair<int, int>> test_cases = {\n        {10, 5},        // Basic case\n        {5, 0},         // Division by zero\n        {0, 0},         // Double zero\n        {0, 10},        // Zero dividend\n        {-10, 5},       // Negative dividend\n        {-10, -5},      // Both negative\n        {1000000, 500000}, // Large numbers\n        {5, 2},         // Non-zero modulo\n        {1, 2}          // Fractional division\n    };\n\n    for (const auto& test : test_cases) {\n        int a = test.first;\n        int b = test.second;\n        cout << \"Input: a = \" << a << \", b = \" << b << endl;\n        map<string, double> result = compute_operations(a, b);\n        \n        cout << \"{\";\n        bool first = true;\n        for (const auto& pair : result) {\n            if (!first) cout << \", \";\n            cout << \"\\\"\" << pair.first << \"\\\": \";\n            if (isnan(pair.second)) cout << \"NaN\";\n            else cout << pair.second;\n            first = false;\n        }\n        cout << \"}\" << endl << endl;\n    }\n}\n\nint main() {\n    full_testing();\n    return 0;\n}\n```\n\n### Explanation\n1. **Core Function**: The `compute_operations` function evolved from simple addition to perform multiple arithmetic operations (addition, subtraction, multiplication, division, modulo) and handles division by zero using NaN values.\n\n2. **Testing Functions**:\n   - `demo_testing()` contains 2 basic test cases demonstrating normal operation and division by zero.\n   - `full_testing()` contains 9 comprehensive test cases covering basic operations, boundary conditions (zeros), negative numbers, large values, and special cases.\n\n3. **Key Enhancements**:\n   - Returns a map with multiple operation results instead of a single value\n   - Handles edge cases like division by zero gracefully\n   - Uses NaN for invalid operations\n   - Maintains JSON-serializable output format\n   - Includes comprehensive test coverage\n\n4. **Execution**:\n   - To run demo tests: Compile with core functions + demo_testing\n   - To run full tests: Compile with core functions + full_testing\n   - Output shows inputs and corresponding operation results in dictionary format"}
