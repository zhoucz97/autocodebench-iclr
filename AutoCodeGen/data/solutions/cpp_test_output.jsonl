{"index": 1, "language": "cpp", "success": true, "full_test_result": {"success": true, "response": {"all_code": "", "exec_compile_message": "", "exec_cout": "Input: a = 10, b = 5\n{\"addition\": 15, \"division\": 2, \"modulo\": 0, \"multiplication\": 50, \"subtraction\": 5}\n\nInput: a = 5, b = 0\n{\"addition\": 5, \"division\": NaN, \"modulo\": NaN, \"multiplication\": 0, \"subtraction\": 5}\n\nInput: a = 0, b = 0\n{\"addition\": 0, \"division\": NaN, \"modulo\": NaN, \"multiplication\": 0, \"subtraction\": 0}\n\nInput: a = 0, b = 10\n{\"addition\": 10, \"division\": 0, \"modulo\": 0, \"multiplication\": 0, \"subtraction\": -10}\n\nInput: a = -10, b = 5\n{\"addition\": -5, \"division\": -2, \"modulo\": 0, \"multiplication\": -50, \"subtraction\": -15}\n\nInput: a = -10, b = -5\n{\"addition\": -15, \"division\": 2, \"modulo\": 0, \"multiplication\": 50, \"subtraction\": -5}\n\nInput: a = 1000000, b = 500000\n{\"addition\": 1.5e+06, \"division\": 2, \"modulo\": 0, \"multiplication\": 1.78379e+09, \"subtraction\": 500000}\n\nInput: a = 5, b = 2\n{\"addition\": 7, \"division\": 2.5, \"modulo\": 1, \"multiplication\": 10, \"subtraction\": 3}\n\nInput: a = 1, b = 2\n{\"addition\": 3, \"division\": 0.5, \"modulo\": 1, \"multiplication\": 2, \"subtraction\": -1}\n\n", "exec_outcome": "PASSED", "exec_runtime_message": "", "response_extensions": {"cmd": ["./test"], "exec_runtime": 0.712, "exit_code": 0, "language": "cpp", "outcome": "PASSED", "path": "/data/codes/cpp/42dcc4f99bea448893e0a2c0793e1a3f/test.cpp", "process_cpu_time": 0.0, "process_cpu_util": 0.0, "process_exec_time": 0.1, "process_peak_memory": 0, "server_ip": "21.74.135.224", "src_uid": "648ef325-9848-4029-ac8a-8e4e2d68e4a6", "stderr": "", "stdout": "Input: a = 10, b = 5\n{\"addition\": 15, \"division\": 2, \"modulo\": 0, \"multiplication\": 50, \"subtraction\": 5}\n\nInput: a = 5, b = 0\n{\"addition\": 5, \"division\": NaN, \"modulo\": NaN, \"multiplication\": 0, \"subtraction\": 5}\n\nInput: a = 0, b = 0\n{\"addition\": 0, \"division\": NaN, \"modulo\": NaN, \"multiplication\": 0, \"subtraction\": 0}\n\nInput: a = 0, b = 10\n{\"addition\": 10, \"division\": 0, \"modulo\": 0, \"multiplication\": 0, \"subtraction\": -10}\n\nInput: a = -10, b = 5\n{\"addition\": -5, \"division\": -2, \"modulo\": 0, \"multiplication\": -50, \"subtraction\": -15}\n\nInput: a = -10, b = -5\n{\"addition\": -15, \"division\": 2, \"modulo\": 0, \"multiplication\": 50, \"subtraction\": -5}\n\nInput: a = 1000000, b = 500000\n{\"addition\": 1.5e+06, \"division\": 2, \"modulo\": 0, \"multiplication\": 1.78379e+09, \"subtraction\": 500000}\n\nInput: a = 5, b = 2\n{\"addition\": 7, \"division\": 2.5, \"modulo\": 1, \"multiplication\": 10, \"subtraction\": 3}\n\nInput: a = 1, b = 2\n{\"addition\": 3, \"division\": 0.5, \"modulo\": 1, \"multiplication\": 2, \"subtraction\": -1}\n\n", "timeout": false}, "src_uid": "648ef325-9848-4029-ac8a-8e4e2d68e4a6"}, "status_code": 200}, "demo_test_result": {"success": true, "response": {"all_code": "", "exec_compile_message": "", "exec_cout": "Input: a = 10, b = 5\n{\"addition\": 15, \"division\": 2, \"modulo\": 0, \"multiplication\": 50, \"subtraction\": 5}\nInput: a = 5, b = 0\n{\"addition\": 5, \"division\": NaN, \"modulo\": NaN, \"multiplication\": 0, \"subtraction\": 5}\n", "exec_outcome": "PASSED", "exec_runtime_message": "", "response_extensions": {"cmd": ["./test"], "exec_runtime": 0.711, "exit_code": 0, "language": "cpp", "outcome": "PASSED", "path": "/data/codes/cpp/963d679a7abb451495ab7111d30ad4f2/test.cpp", "process_cpu_time": 0.0, "process_cpu_util": 0.0, "process_exec_time": 0.1, "process_peak_memory": 0, "server_ip": "21.93.94.237", "src_uid": "1095026a-6d33-4358-ad64-3654f124b58b", "stderr": "", "stdout": "Input: a = 10, b = 5\n{\"addition\": 15, \"division\": 2, \"modulo\": 0, \"multiplication\": 50, \"subtraction\": 5}\nInput: a = 5, b = 0\n{\"addition\": 5, \"division\": NaN, \"modulo\": NaN, \"multiplication\": 0, \"subtraction\": 5}\n", "timeout": false}, "src_uid": "1095026a-6d33-4358-ad64-3654f124b58b"}, "status_code": 200}, "original_data": {"index": 0, "seed": "#include <iostream>\nusing namespace std;\n\nint add_two_numbers(int a, int b) {\n    return a + b;\n}", "canonical_solution": "```cpp\n#include <iostream>\n#include <map>\n#include <cmath>\n#include <vector>\n#include <stdexcept>\nusing namespace std;\n\nmap<string, double> compute_operations(int a, int b) {\n    map<string, double> results;\n    results[\"addition\"] = a + b;\n    results[\"subtraction\"] = a - b;\n    results[\"multiplication\"] = a * b;\n    \n    if (b != 0) {\n        results[\"division\"] = static_cast<double>(a) / b;\n        results[\"modulo\"] = a % b;\n    } else {\n        results[\"division\"] = NAN;\n        results[\"modulo\"] = NAN;\n    }\n    \n    return results;\n}\n```", "demo_test_func": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cmath>\nusing namespace std;\n\nvoid demo_testing() {\n    vector<pair<int, int>> test_cases = {\n        {10, 5},\n        {5, 0}\n    };\n\n    for (const auto& test : test_cases) {\n        int a = test.first;\n        int b = test.second;\n        cout << \"Input: a = \" << a << \", b = \" << b << endl;\n        map<string, double> result = compute_operations(a, b);\n        \n        cout << \"{\";\n        bool first = true;\n        for (const auto& pair : result) {\n            if (!first) cout << \", \";\n            cout << \"\\\"\" << pair.first << \"\\\": \";\n            if (isnan(pair.second)) cout << \"NaN\";\n            else cout << pair.second;\n            first = false;\n        }\n        cout << \"}\" << endl;\n    }\n}\n\nint main() {\n    demo_testing();\n    return 0;\n}", "full_test_func": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cmath>\nusing namespace std;\n\nvoid full_testing() {\n    vector<pair<int, int>> test_cases = {\n        {10, 5},        // Basic case\n        {5, 0},         // Division by zero\n        {0, 0},         // Double zero\n        {0, 10},        // Zero dividend\n        {-10, 5},       // Negative dividend\n        {-10, -5},      // Both negative\n        {1000000, 500000}, // Large numbers\n        {5, 2},         // Non-zero modulo\n        {1, 2}          // Fractional division\n    };\n\n    for (const auto& test : test_cases) {\n        int a = test.first;\n        int b = test.second;\n        cout << \"Input: a = \" << a << \", b = \" << b << endl;\n        map<string, double> result = compute_operations(a, b);\n        \n        cout << \"{\";\n        bool first = true;\n        for (const auto& pair : result) {\n            if (!first) cout << \", \";\n            cout << \"\\\"\" << pair.first << \"\\\": \";\n            if (isnan(pair.second)) cout << \"NaN\";\n            else cout << pair.second;\n            first = false;\n        }\n        cout << \"}\" << endl << endl;\n    }\n}\n\nint main() {\n    full_testing();\n    return 0;\n}", "language": "cpp", "_absolute_line_number": 1, "_relative_line_number": 1, "extracted_code": "#include <iostream>\n#include <map>\n#include <cmath>\n#include <vector>\n#include <stdexcept>\nusing namespace std;\n\nmap<string, double> compute_operations(int a, int b) {\n    map<string, double> results;\n    results[\"addition\"] = a + b;\n    results[\"subtraction\"] = a - b;\n    results[\"multiplication\"] = a * b;\n    \n    if (b != 0) {\n        results[\"division\"] = static_cast<double>(a) / b;\n        results[\"modulo\"] = a % b;\n    } else {\n        results[\"division\"] = NAN;\n        results[\"modulo\"] = NAN;\n    }\n    \n    return results;\n}"}}
