{"index": 1, "language": "python", "success": true, "full_test_result": {"success": true, "response": {"all_code": "", "exec_compile_message": "", "exec_cout": "Vector: [3, 4]\nMagnitude: 5.0\nVector: [1, 2, 2]\nMagnitude: 3.0\nVector: []\nMagnitude: 0.0\nVector: [5]\nMagnitude: 5.0\nVector: [-3, -4]\nMagnitude: 5.0\nVector: [0, 0, 0]\nMagnitude: 0.0\nVector: [1, 1, 1, 1, 1]\nMagnitude: 2.23606797749979\nVector: [1000000, 1000000]\nMagnitude: 1414213.562373095\nVector: [0.3, 0.4]\nMagnitude: 0.5\nVector: not a vector\nError: Input must be a list\nVector: [1, 'a', 3]\nError: All vector components must be numeric\n", "exec_outcome": "PASSED", "exec_runtime_message": "", "response_extensions": {"cmd": ["python3", "test.py"], "exec_runtime": 0.103, "exit_code": 0, "language": "python", "outcome": "PASSED", "path": "/data/codes/python/e7a15062b5bc4df89d1b0ad400ed76a4/test.py", "process_cpu_time": 0.01, "process_cpu_util": 10.0, "process_exec_time": 0.1, "process_peak_memory": 0, "server_ip": "30.182.43.106", "src_uid": "596bf4e6-a137-475f-8dba-25a1eec6b4c2", "stderr": "", "stdout": "Vector: [3, 4]\nMagnitude: 5.0\nVector: [1, 2, 2]\nMagnitude: 3.0\nVector: []\nMagnitude: 0.0\nVector: [5]\nMagnitude: 5.0\nVector: [-3, -4]\nMagnitude: 5.0\nVector: [0, 0, 0]\nMagnitude: 0.0\nVector: [1, 1, 1, 1, 1]\nMagnitude: 2.23606797749979\nVector: [1000000, 1000000]\nMagnitude: 1414213.562373095\nVector: [0.3, 0.4]\nMagnitude: 0.5\nVector: not a vector\nError: Input must be a list\nVector: [1, 'a', 3]\nError: All vector components must be numeric\n", "timeout": false}, "src_uid": "596bf4e6-a137-475f-8dba-25a1eec6b4c2"}, "status_code": 200}, "demo_test_result": {"success": true, "response": {"all_code": "", "exec_compile_message": "", "exec_cout": "Vector: [3, 4]\nMagnitude: 5.0\nVector: [1, 2, 2]\nMagnitude: 3.0\n", "exec_outcome": "PASSED", "exec_runtime_message": "", "response_extensions": {"cmd": ["python3", "test.py"], "exec_runtime": 0.104, "exit_code": 0, "language": "python", "outcome": "PASSED", "path": "/data/codes/python/133b4ffca9124c4c986f4f44d48347f6/test.py", "process_cpu_time": 0.0, "process_cpu_util": 0.0, "process_exec_time": 0.1, "process_peak_memory": 0, "server_ip": "11.139.141.191", "src_uid": "ffd3f236-66fd-4331-8076-08a8d6f18677", "stderr": "", "stdout": "Vector: [3, 4]\nMagnitude: 5.0\nVector: [1, 2, 2]\nMagnitude: 3.0\n", "timeout": false}, "src_uid": "ffd3f236-66fd-4331-8076-08a8d6f18677"}, "status_code": 200}, "original_data": {"index": 0, "seed": "def add_two_numbers(a, b):\n    return a + b", "canonical_solution": "```python\nimport math\n\ndef calculate_vector_magnitude(vector):\n    \"\"\"\n    Calculates the magnitude (length) of a vector in n-dimensional space.\n    \n    Args:\n        vector: A list of numerical values representing the vector components.\n    \n    Returns:\n        float: The magnitude of the vector.\n    \n    Raises:\n        ValueError: If input is not a list or contains non-numeric values.\n    \"\"\"\n    if not isinstance(vector, list):\n        raise ValueError(\"Input must be a list\")\n    \n    if not all(isinstance(x, (int, float)) for x in vector):\n        raise ValueError(\"All vector components must be numeric\")\n    \n    if len(vector) == 0:\n        return 0.0\n    \n    squared_sum = sum(x**2 for x in vector)\n    return math.sqrt(squared_sum)\n```", "demo_test_func": "def demo_testing():\n    \"\"\"\n    Demonstrates basic functionality with 2 simple test cases.\n    Prints inputs and corresponding outputs for verification.\n    \"\"\"\n    test_vectors = [\n        [3, 4],        # 2D vector (3,4) should have magnitude 5\n        [1, 2, 2]      # 3D vector (1,2,2) should have magnitude 3\n    ]\n    \n    for vector in test_vectors:\n        print(f\"Vector: {vector}\")\n        magnitude = calculate_vector_magnitude(vector)\n        print(f\"Magnitude: {magnitude}\")\n\nif __name__ == \"__main__\":\n    demo_testing()", "full_test_func": "def full_testing():\n    \"\"\"\n    Comprehensive testing with various cases including:\n    - Basic calculations\n    - Edge cases (empty vector, single element)\n    - High-dimensional vectors\n    - Negative values\n    - Large numbers\n    - Decimal values\n    - Error cases\n    \"\"\"\n    test_vectors = [\n        [3, 4],            # Basic 2D case (should be 5)\n        [1, 2, 2],         # Basic 3D case (should be 3)\n        [],                 # Empty vector (should be 0)\n        [5],                # Single element (should be 5)\n        [-3, -4],           # Negative values (should be 5)\n        [0, 0, 0],          # Zero vector (should be 0)\n        [1, 1, 1, 1, 1],    # 5D vector (should be √5 ≈ 2.236)\n        [10**6, 10**6],     # Large numbers (should be √2 * 10^6)\n        [0.3, 0.4],         # Decimals (should be 0.5)\n        \"not a vector\",     # Invalid type (should raise error)\n        [1, \"a\", 3]         # Non-numeric element (should raise error)\n    ]\n    \n    for vector in test_vectors:\n        print(f\"Vector: {vector}\")\n        try:\n            magnitude = calculate_vector_magnitude(vector)\n            print(f\"Magnitude: {magnitude}\")\n        except ValueError as e:\n            print(f\"Error: {str(e)}\")\n\nif __name__ == \"__main__\":\n    full_testing()", "language": "python", "_absolute_line_number": 1, "_relative_line_number": 1, "extracted_code": "import math\n\ndef calculate_vector_magnitude(vector):\n    \"\"\"\n    Calculates the magnitude (length) of a vector in n-dimensional space.\n    \n    Args:\n        vector: A list of numerical values representing the vector components.\n    \n    Returns:\n        float: The magnitude of the vector.\n    \n    Raises:\n        ValueError: If input is not a list or contains non-numeric values.\n    \"\"\"\n    if not isinstance(vector, list):\n        raise ValueError(\"Input must be a list\")\n    \n    if not all(isinstance(x, (int, float)) for x in vector):\n        raise ValueError(\"All vector components must be numeric\")\n    \n    if len(vector) == 0:\n        return 0.0\n    \n    squared_sum = sum(x**2 for x in vector)\n    return math.sqrt(squared_sum)"}}
