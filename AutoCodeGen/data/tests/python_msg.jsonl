{"index": 0, "seed": "def add_two_numbers(a, b):\n    return a + b", "canonical_solution": "```python\nimport math\n\ndef calculate_vector_magnitude(vector):\n    \"\"\"\n    Calculates the magnitude (length) of a vector in n-dimensional space.\n    \n    Args:\n        vector: A list of numerical values representing the vector components.\n    \n    Returns:\n        float: The magnitude of the vector.\n    \n    Raises:\n        ValueError: If input is not a list or contains non-numeric values.\n    \"\"\"\n    if not isinstance(vector, list):\n        raise ValueError(\"Input must be a list\")\n    \n    if not all(isinstance(x, (int, float)) for x in vector):\n        raise ValueError(\"All vector components must be numeric\")\n    \n    if len(vector) == 0:\n        return 0.0\n    \n    squared_sum = sum(x**2 for x in vector)\n    return math.sqrt(squared_sum)\n```", "language": "python", "demo_test_input": "def demo_testing():\n    \"\"\"\n    Demonstrates basic functionality with 2 simple test cases.\n    Prints inputs and corresponding outputs for verification.\n    \"\"\"\n    test_vectors = [\n        [3, 4],        # 2D vector (3,4) should have magnitude 5\n        [1, 2, 2]      # 3D vector (1,2,2) should have magnitude 3\n    ]\n    \n    for vector in test_vectors:\n        print(f\"Vector: {vector}\")\n        magnitude = calculate_vector_magnitude(vector)\n        print(f\"Magnitude: {magnitude}\")\n\nif __name__ == \"__main__\":\n    demo_testing()", "demo_test_output": "Vector: [3, 4]\nMagnitude: 5.0\nVector: [1, 2, 2]\nMagnitude: 3.0\n", "full_test_input": "def full_testing():\n    \"\"\"\n    Comprehensive testing with various cases including:\n    - Basic calculations\n    - Edge cases (empty vector, single element)\n    - High-dimensional vectors\n    - Negative values\n    - Large numbers\n    - Decimal values\n    - Error cases\n    \"\"\"\n    test_vectors = [\n        [3, 4],            # Basic 2D case (should be 5)\n        [1, 2, 2],         # Basic 3D case (should be 3)\n        [],                 # Empty vector (should be 0)\n        [5],                # Single element (should be 5)\n        [-3, -4],           # Negative values (should be 5)\n        [0, 0, 0],          # Zero vector (should be 0)\n        [1, 1, 1, 1, 1],    # 5D vector (should be √5 ≈ 2.236)\n        [10**6, 10**6],     # Large numbers (should be √2 * 10^6)\n        [0.3, 0.4],         # Decimals (should be 0.5)\n        \"not a vector\",     # Invalid type (should raise error)\n        [1, \"a\", 3]         # Non-numeric element (should raise error)\n    ]\n    \n    for vector in test_vectors:\n        print(f\"Vector: {vector}\")\n        try:\n            magnitude = calculate_vector_magnitude(vector)\n            print(f\"Magnitude: {magnitude}\")\n        except ValueError as e:\n            print(f\"Error: {str(e)}\")\n\nif __name__ == \"__main__\":\n    full_testing()", "full_test_output": "Vector: [3, 4]\nMagnitude: 5.0\nVector: [1, 2, 2]\nMagnitude: 3.0\nVector: []\nMagnitude: 0.0\nVector: [5]\nMagnitude: 5.0\nVector: [-3, -4]\nMagnitude: 5.0\nVector: [0, 0, 0]\nMagnitude: 0.0\nVector: [1, 1, 1, 1, 1]\nMagnitude: 2.23606797749979\nVector: [1000000, 1000000]\nMagnitude: 1414213.562373095\nVector: [0.3, 0.4]\nMagnitude: 0.5\nVector: not a vector\nError: Input must be a list\nVector: [1, 'a', 3]\nError: All vector components must be numeric\n", "messages": [{"role": "system", "content": ""}, {"role": "user", "content": "I'll provide you with a Python code, a test function call (including inputs) that uses this Python function, and the test output obtained after executing that test function call.\n\nPlease combine the provided inputs and outputs into an assert statement, and place these `assert` statements inside a new `test` function. You can only use the inputs and outputs provided by me. Please do not create your own or modify the test cases.\n\n\n\nPlease generate a Python test function using assert statements. You will be provided with:\n- Python Code: The function(s) to be tested.\n- Two Test Function Calls (including inputs): Python code demonstrating how the function is called with various inputs. \n- Test Outputs: The results obtained after executing the provided test function calls.\nYou will receive two sets of test cases:\n\n\nImportant Considerations for assert statements:\n- DO NOT create or modify any test cases. Use only the inputs and outputs provided.\n- Avoid assertions that might differ due to floating-point precision across machines. If the original output involves floating-point numbers, and the problem context suggests it, consider using math.isclose() or asserting within a reasonable tolerance if the test cases inherently involve such comparisons and precision is a concern. However, prioritize direct equality == if the provided outputs are exact.\n- All assert statements must be placed within a function named test().\n- Please create **two separate** test functions for each of the two sets of test function calls I provide, ensuring they do not interfere with each other.\n- Two test function names are both \"def test()\". They are placed in two code blocks.\n\n\n\nHere is an example:\n**Code**:\n```python\nfrom math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef nth_prime(n):\n    if n < 1:\n        return None\n    count = 1\n    i = 2\n    while count < n:\n        i += 1\n        if is_prime(i):\n            count += 1\n    return i\n```\n\n**Test Function Call 1**:\n```python\ndef demo_testing():\n    # Hard-coded test inputs\n    test_cases = [1]\n\n    for n in test_cases:\n        # Print the input\n        print(f\"Input: {n}\")\n\n        # Core logic\n        result = nth_prime(n)\n\n        # Output (JSON-serializable)\n        print(f\"The {n}th prime number is: {result}\")\n\nif __name__ == \"__main__\":\n    demo_testing()\n```\n\n**Test Case Results1**:\n```\n'Input: 1\\nThe 1th prime number is: 2'\n```\n\n\n**Test Function Call 2**\n```python\ndef full_testing():\n    # Hard-coded test inputs\n    test_cases = [1, 5, 10, 100, 10001]\n\n    for n in test_cases:\n        # Print the input\n        print(f\"Input: {n}\")\n\n        # Core logic\n        result = nth_prime(n)\n\n        # Output (JSON-serializable)\n        print(f\"The {n}th prime number is: {result}\")\n\nif __name__ == \"__main__\":\n    full_testing()\n```\n\n\n**Test Case Results2**:\n```\n'Input: 1\\nThe 1th prime number is: 2\\nInput: 5\\nThe 5th prime number is: 11\\nInput: 10\\nThe 10th prime number is: 29\\nInput: 100\\nThe 100th prime number is: 541\\nInput: 10001\\nThe 10001th prime number is: 104743'\n```\n\nBased on the above information, the generated `assert` statements should be placed in a new `test` function like this:\n\n**Test Function1 for demo_testing()**\n```python\ndef test():\n    assert nth_prime(1) == 2\n\nif __name__ == \"__main__\":\n    test()\n```\n\n\n**Test Function2 for full_testing()**\n```python\ndef test():\n    assert nth_prime(1) == 2\n    assert nth_prime(5) == 11\n    assert nth_prime(10) == 29\n    assert nth_prime(100) == 541\n    assert nth_prime(10001) == 104743\n\nif __name__ == \"__main__\":\n    test()\n```\n\nHere is the data you need to process. Please place the function named `test` that you need to generate two code blocks enclosed by ```python and ```. Place demo and full in two separate code blocks, not in the same code block.\n\n[Code Start]\n```python\nimport math\n\ndef calculate_vector_magnitude(vector):\n    \"\"\"\n    Calculates the magnitude (length) of a vector in n-dimensional space.\n    \n    Args:\n        vector: A list of numerical values representing the vector components.\n    \n    Returns:\n        float: The magnitude of the vector.\n    \n    Raises:\n        ValueError: If input is not a list or contains non-numeric values.\n    \"\"\"\n    if not isinstance(vector, list):\n        raise ValueError(\"Input must be a list\")\n    \n    if not all(isinstance(x, (int, float)) for x in vector):\n        raise ValueError(\"All vector components must be numeric\")\n    \n    if len(vector) == 0:\n        return 0.0\n    \n    squared_sum = sum(x**2 for x in vector)\n    return math.sqrt(squared_sum)\n```\n[Code End]\n\n[Test Function Call 1 Start]\ndef demo_testing():\n    \"\"\"\n    Demonstrates basic functionality with 2 simple test cases.\n    Prints inputs and corresponding outputs for verification.\n    \"\"\"\n    test_vectors = [\n        [3, 4],        # 2D vector (3,4) should have magnitude 5\n        [1, 2, 2]      # 3D vector (1,2,2) should have magnitude 3\n    ]\n    \n    for vector in test_vectors:\n        print(f\"Vector: {vector}\")\n        magnitude = calculate_vector_magnitude(vector)\n        print(f\"Magnitude: {magnitude}\")\n\nif __name__ == \"__main__\":\n    demo_testing()\n[Test Function Call 1 End]\n\n[Test Case Results 1 Start]\nVector: [3, 4]\nMagnitude: 5.0\nVector: [1, 2, 2]\nMagnitude: 3.0\n\n[Test Case Results 1 End]\n\n[Test Function Call 2 Start]\ndef full_testing():\n    \"\"\"\n    Comprehensive testing with various cases including:\n    - Basic calculations\n    - Edge cases (empty vector, single element)\n    - High-dimensional vectors\n    - Negative values\n    - Large numbers\n    - Decimal values\n    - Error cases\n    \"\"\"\n    test_vectors = [\n        [3, 4],            # Basic 2D case (should be 5)\n        [1, 2, 2],         # Basic 3D case (should be 3)\n        [],                 # Empty vector (should be 0)\n        [5],                # Single element (should be 5)\n        [-3, -4],           # Negative values (should be 5)\n        [0, 0, 0],          # Zero vector (should be 0)\n        [1, 1, 1, 1, 1],    # 5D vector (should be √5 ≈ 2.236)\n        [10**6, 10**6],     # Large numbers (should be √2 * 10^6)\n        [0.3, 0.4],         # Decimals (should be 0.5)\n        \"not a vector\",     # Invalid type (should raise error)\n        [1, \"a\", 3]         # Non-numeric element (should raise error)\n    ]\n    \n    for vector in test_vectors:\n        print(f\"Vector: {vector}\")\n        try:\n            magnitude = calculate_vector_magnitude(vector)\n            print(f\"Magnitude: {magnitude}\")\n        except ValueError as e:\n            print(f\"Error: {str(e)}\")\n\nif __name__ == \"__main__\":\n    full_testing()\n[Test Function Call 2 End]\n\n[Test Case Results 2 Start]\nVector: [3, 4]\nMagnitude: 5.0\nVector: [1, 2, 2]\nMagnitude: 3.0\nVector: []\nMagnitude: 0.0\nVector: [5]\nMagnitude: 5.0\nVector: [-3, -4]\nMagnitude: 5.0\nVector: [0, 0, 0]\nMagnitude: 0.0\nVector: [1, 1, 1, 1, 1]\nMagnitude: 2.23606797749979\nVector: [1000000, 1000000]\nMagnitude: 1414213.562373095\nVector: [0.3, 0.4]\nMagnitude: 0.5\nVector: not a vector\nError: Input must be a list\nVector: [1, 'a', 3]\nError: All vector components must be numeric\n\n[Test Case Results 2 End]"}]}
