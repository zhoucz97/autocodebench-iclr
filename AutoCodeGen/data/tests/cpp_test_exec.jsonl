{"index": 1, "language": "cpp", "success": false, "full_test_result": {"success": true, "response": {"all_code": "", "exec_compile_message": "", "exec_cout": "", "exec_outcome": "RUNTIME_ERROR", "exec_runtime_message": "test: test.cpp:82: void full_test(): Assertion `res[\"multiplication\"] == 1783790000.0' failed.\n", "response_extensions": {"cmd": ["./test"], "exec_runtime": 0.71, "exit_code": -6, "language": "cpp", "outcome": "RUNTIME_ERROR", "path": "/data/codes/cpp/817148cac18e4e01a3197328affa3131/test.cpp", "process_cpu_time": 0.0, "process_cpu_util": 0.0, "process_exec_time": 0.1, "process_peak_memory": 0, "server_ip": "21.86.42.59", "src_uid": "8a552c81-e259-49f2-9ef9-27313ef661d7", "stderr": "test: test.cpp:82: void full_test(): Assertion `res[\"multiplication\"] == 1783790000.0' failed.\n", "stdout": "", "timeout": false}, "src_uid": "8a552c81-e259-49f2-9ef9-27313ef661d7"}, "status_code": 200}, "demo_test_result": {"success": true, "response": {"all_code": "", "exec_compile_message": "", "exec_cout": "", "exec_outcome": "PASSED", "exec_runtime_message": "", "response_extensions": {"cmd": ["./test"], "exec_runtime": 0.713, "exit_code": 0, "language": "cpp", "outcome": "PASSED", "path": "/data/codes/cpp/bef7ec0ad1ad4aceb30164a4d6d46999/test.cpp", "process_cpu_time": 0.0, "process_cpu_util": 0.0, "process_exec_time": 0.1, "process_peak_memory": 0, "server_ip": "30.182.21.82", "src_uid": "637e19e3-2f7c-4b60-9018-2692255c967f", "stderr": "", "stdout": "", "timeout": false}, "src_uid": "637e19e3-2f7c-4b60-9018-2692255c967f"}, "status_code": 200}, "original_data": {"index": 0, "seed": "#include <iostream>\nusing namespace std;\n\nint add_two_numbers(int a, int b) {\n    return a + b;\n}", "canonical_solution": "```cpp\n#include <iostream>\n#include <map>\n#include <cmath>\n#include <vector>\n#include <stdexcept>\nusing namespace std;\n\nmap<string, double> compute_operations(int a, int b) {\n    map<string, double> results;\n    results[\"addition\"] = a + b;\n    results[\"subtraction\"] = a - b;\n    results[\"multiplication\"] = a * b;\n    \n    if (b != 0) {\n        results[\"division\"] = static_cast<double>(a) / b;\n        results[\"modulo\"] = a % b;\n    } else {\n        results[\"division\"] = NAN;\n        results[\"modulo\"] = NAN;\n    }\n    \n    return results;\n}\n```", "language": "cpp", "demo_test_func": "#include <cassert>\n#include <cmath>\n#include <map>\n#include <string>\nusing namespace std;\n\nmap<string, double> compute_operations(int a, int b);\n\nvoid demo_test() {\n    map<string, double> res = compute_operations(10, 5);\n    assert(res[\"addition\"] == 15);\n    assert(res[\"subtraction\"] == 5);\n    assert(res[\"multiplication\"] == 50);\n    assert(res[\"division\"] == 2.0);\n    assert(res[\"modulo\"] == 0);\n\n    res = compute_operations(5, 0);\n    assert(res[\"addition\"] == 5);\n    assert(res[\"subtraction\"] == 5);\n    assert(res[\"multiplication\"] == 0);\n    assert(isnan(res[\"division\"]));\n    assert(isnan(res[\"modulo\"]));\n}\n\nint main() {\n    demo_test();\n    return 0;\n}", "full_test_func": "#include <cassert>\n#include <cmath>\n#include <map>\n#include <string>\nusing namespace std;\n\nmap<string, double> compute_operations(int a, int b);\n\nvoid full_test() {\n    map<string, double> res;\n\n    res = compute_operations(10, 5);\n    assert(res[\"addition\"] == 15);\n    assert(res[\"subtraction\"] == 5);\n    assert(res[\"multiplication\"] == 50);\n    assert(res[\"division\"] == 2.0);\n    assert(res[\"modulo\"] == 0);\n\n    res = compute_operations(5, 0);\n    assert(res[\"addition\"] == 5);\n    assert(res[\"subtraction\"] == 5);\n    assert(res[\"multiplication\"] == 0);\n    assert(isnan(res[\"division\"]));\n    assert(isnan(res[\"modulo\"]));\n\n    res = compute_operations(0, 0);\n    assert(res[\"addition\"] == 0);\n    assert(res[\"subtraction\"] == 0);\n    assert(res[\"multiplication\"] == 0);\n    assert(isnan(res[\"division\"]));\n    assert(isnan(res[\"modulo\"]));\n\n    res = compute_operations(0, 10);\n    assert(res[\"addition\"] == 10);\n    assert(res[\"subtraction\"] == -10);\n    assert(res[\"multiplication\"] == 0);\n    assert(res[\"division\"] == 0.0);\n    assert(res[\"modulo\"] == 0);\n\n    res = compute_operations(-10, 5);\n    assert(res[\"addition\"] == -5);\n    assert(res[\"subtraction\"] == -15);\n    assert(res[\"multiplication\"] == -50);\n    assert(res[\"division\"] == -2.0);\n    assert(res[\"modulo\"] == 0);\n\n    res = compute_operations(-10, -5);\n    assert(res[\"addition\"] == -15);\n    assert(res[\"subtraction\"] == -5);\n    assert(res[\"multiplication\"] == 50);\n    assert(res[\"division\"] == 2.0);\n    assert(res[\"modulo\"] == 0);\n\n    res = compute_operations(1000000, 500000);\n    assert(res[\"addition\"] == 1500000.0);\n    assert(res[\"subtraction\"] == 500000.0);\n    assert(res[\"multiplication\"] == 1783790000.0);\n    assert(res[\"division\"] == 2.0);\n    assert(res[\"modulo\"] == 0);\n\n    res = compute_operations(5, 2);\n    assert(res[\"addition\"] == 7);\n    assert(res[\"subtraction\"] == 3);\n    assert(res[\"multiplication\"] == 10);\n    assert(res[\"division\"] == 2.5);\n    assert(res[\"modulo\"] == 1);\n\n    res = compute_operations(1, 2);\n    assert(res[\"addition\"] == 3);\n    assert(res[\"subtraction\"] == -1);\n    assert(res[\"multiplication\"] == 2);\n    assert(res[\"division\"] == 0.5);\n    assert(res[\"modulo\"] == 1);\n}\n\nint main() {\n    full_test();\n    return 0;\n}", "_absolute_line_number": 1, "_relative_line_number": 1, "extracted_code": "#include <iostream>\n#include <map>\n#include <cmath>\n#include <vector>\n#include <stdexcept>\nusing namespace std;\n\nmap<string, double> compute_operations(int a, int b) {\n    map<string, double> results;\n    results[\"addition\"] = a + b;\n    results[\"subtraction\"] = a - b;\n    results[\"multiplication\"] = a * b;\n    \n    if (b != 0) {\n        results[\"division\"] = static_cast<double>(a) / b;\n        results[\"modulo\"] = a % b;\n    } else {\n        results[\"division\"] = NAN;\n        results[\"modulo\"] = NAN;\n    }\n    \n    return results;\n}"}}
