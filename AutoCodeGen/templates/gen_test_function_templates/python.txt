I'll provide you with a Python code, a test function call (including inputs) that uses this Python function, and the test output obtained after executing that test function call.

Please combine the provided inputs and outputs into an assert statement, and place these `assert` statements inside a new `test` function. You can only use the inputs and outputs provided by me. Please do not create your own or modify the test cases.



Please generate a Python test function using assert statements. You will be provided with:
- Python Code: The function(s) to be tested.
- Two Test Function Calls (including inputs): Python code demonstrating how the function is called with various inputs. 
- Test Outputs: The results obtained after executing the provided test function calls.
You will receive two sets of test cases:


Important Considerations for assert statements:
- DO NOT create or modify any test cases. Use only the inputs and outputs provided.
- Avoid assertions that might differ due to floating-point precision across machines. If the original output involves floating-point numbers, and the problem context suggests it, consider using math.isclose() or asserting within a reasonable tolerance if the test cases inherently involve such comparisons and precision is a concern. However, prioritize direct equality == if the provided outputs are exact.
- All assert statements must be placed within a function named test().
- Please create **two separate** test functions for each of the two sets of test function calls I provide, ensuring they do not interfere with each other.
- Two test function names are both "def test()". They are placed in two code blocks.



Here is an example:
**Code**:
```python
from math import sqrt

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def nth_prime(n):
    if n < 1:
        return None
    count = 1
    i = 2
    while count < n:
        i += 1
        if is_prime(i):
            count += 1
    return i
```

**Test Function Call 1**:
```python
def demo_testing():
    # Hard-coded test inputs
    test_cases = [1]

    for n in test_cases:
        # Print the input
        print(f"Input: {n}")

        # Core logic
        result = nth_prime(n)

        # Output (JSON-serializable)
        print(f"The {n}th prime number is: {result}")

if __name__ == "__main__":
    demo_testing()
```

**Test Case Results1**:
```
'Input: 1\nThe 1th prime number is: 2'
```


**Test Function Call 2**
```python
def full_testing():
    # Hard-coded test inputs
    test_cases = [1, 5, 10, 100, 10001]

    for n in test_cases:
        # Print the input
        print(f"Input: {n}")

        # Core logic
        result = nth_prime(n)

        # Output (JSON-serializable)
        print(f"The {n}th prime number is: {result}")

if __name__ == "__main__":
    full_testing()
```


**Test Case Results2**:
```
'Input: 1\nThe 1th prime number is: 2\nInput: 5\nThe 5th prime number is: 11\nInput: 10\nThe 10th prime number is: 29\nInput: 100\nThe 100th prime number is: 541\nInput: 10001\nThe 10001th prime number is: 104743'
```

Based on the above information, the generated `assert` statements should be placed in a new `test` function like this:

**Test Function1 for demo_testing()**
```python
def test():
    assert nth_prime(1) == 2

if __name__ == "__main__":
    test()
```


**Test Function2 for full_testing()**
```python
def test():
    assert nth_prime(1) == 2
    assert nth_prime(5) == 11
    assert nth_prime(10) == 29
    assert nth_prime(100) == 541
    assert nth_prime(10001) == 104743

if __name__ == "__main__":
    test()
```

Here is the data you need to process. Please place the function named `test` that you need to generate two code blocks enclosed by ```python and ```. Place demo and full in two separate code blocks, not in the same code block.

[Code Start]
<<<<code>>>>
[Code End]

[Test Function Call 1 Start]
<<<<test cases>>>>
[Test Function Call 1 End]

[Test Case Results 1 Start]
<<<<test case results>>>>
[Test Case Results 1 End]

[Test Function Call 2 Start]
<<<<test cases2>>>>
[Test Function Call 2 End]

[Test Case Results 2 Start]
<<<<test case results2>>>>
[Test Case Results 2 End]