I'll provide you with a Shell script code, a test command execution (including inputs) that uses this Shell script, and the test output obtained after executing that test command.

Please combine the provided inputs and outputs into validation checks, and place these test conditions in a new test function. You can only use the inputs and outputs provided by me. Please do not create your own or modify the test cases.


Please generate a Shell test function using command validation checks. You will be provided with:
- Shell Script: The function/script to be tested.
- Two Test Command Executions (including inputs): Shell commands demonstrating how the function/script is executed with various inputs. 
- Test Outputs: The results obtained after executing the provided test commands.
You will receive two sets of test cases:


Important Considerations for validation checks:
- DO NOT create or modify any test cases. Use only the inputs and outputs provided.
- Avoid validations that might differ due to floating-point precision across machines. If the original output involves floating-point numbers, consider using bc for precise comparisons if the test cases inherently involve such comparisons and precision is a concern. However, prioritize direct equality checks using = operator if the provided outputs are exact.
- All validation checks must be placed within a function named test().
- Create two separate test functions for each of the two sets of test commands I provide, ensuring they don't interfere with each other.
- Two test function names should both be "test()". They should be placed in two separate code blocks.


Here is an example:
**Code**:
```sh
is_prime() {
    n=$1
    if [ $n -lt 2 ]; then
        return 1
    fi
    for ((i=2; i*i<=n; i++)); do
        if [ $((n % i)) -eq 0 ]; then
            return 1
        fi
    done
    return 0
}

nth_prime() {
    n=$1
    count=0
    num=1
    while [ $count -lt $n ]; do
        ((num++))
        if is_prime $num; then
            ((count++))
        fi
    done
    echo $num
}
```

**Test Command 1**:
```sh
demo_testing() {
    test_cases=(1)
    for n in "${test_cases[@]}"; do
        echo "Input: $n"
        result=$(nth_prime $n)
        echo "The ${n}th prime number is: $result"
    done
}
```

**Test Results1**:
```
Input: 1
The 1th prime number is: 2
```


**Test Command 2**
```sh
full_testing() {
    test_cases=(1 5 10 100 10001)
    for n in "${test_cases[@]}"; do
        echo "Input: $n"
        result=$(nth_prime $n)
        echo "The ${n}th prime number is: $result"
    done
}
```


**Test Results2**:
```
Input: 1
The 1th prime number is: 2
Input: 5
The 5th prime number is: 11
Input: 10
The 10th prime number is: 29
Input: 100
The 100th prime number is: 541
Input: 10001
The 10001th prime number is: 104743
```

Based on the above information, the generated validation checks should be placed in test functions like this:

**Test Function1 for demo_testing()**
```sh
test() {
    [ "$(nth_prime 1)" = "2" ] || { echo "Test failed"; exit 1; }
}

test
```


**Test Function2 for full_testing()**
```sh
test() {
    [ "$(nth_prime 1)" = "2" ] && \
    [ "$(nth_prime 5)" = "11" ] && \
    [ "$(nth_prime 10)" = "29" ] && \
    [ "$(nth_prime 100)" = "541" ] && \
    [ "$(nth_prime 10001)" = "104743" ] || { echo "Test failed"; exit 1; }
}

test
```

Here is the data you need to process. Please place the function named `test` that you need to generate two code blocks enclosed by ```sh and ```. Place demo and full in two separate code blocks, not in the same code block.

[Code Start]
<<<<code>>>>
[Code End]

[Test Command 1 Start]
<<<<test cases>>>>
[Test Command 1 End]

[Test Results 1 Start]
<<<<test case results>>>>
[Test Results 1 End]

[Test Command 2 Start]
<<<<test cases2>>>>
[Test Command 2 End]

[Test Results 2 Start]
<<<<test case results2>>>>
[Test Results 2 End]
