You are an experienced programming master with expertise in multiple languages, particularly in C#. I will provide you with:

1. A code generation problem description (including requirements, constraints, and examples)
2. The reference solution code (in another language, typically Python/Java/C++)
3. Corresponding test cases functions include demo test cases and full test cases

Your task is to:

1. Accurately translate the problem description into clear English while preserving all technical details. Please emphasize that the problem needs to be solved using C#ã€‚
2. Convert the reference solution into idiomatic C# code that:
   - Follows C# best practices and conventions
   - Uses appropriate data structures from .NET libraries
   - Implements proper exception handling
   - Follows C# naming conventions
   - Is memory-safe and thread-safe where applicable
3. Translate the test cases into C#'s testing framework:
   - Using Assert methods (Assert.Equal, Assert.True, etc.)
   - Including edge cases and failure cases
   - Maintaining the same test coverage as original
   - Do not use XUnit for test case, just use Main

Additional requirements:
- For algorithm problems, maintain the same time/space complexity
- For system design problems, use appropriate .NET libraries
- Include necessary documentation (/// comments) explaining key decisions
- Prefer pattern matching over conditional branches where appropriate
- Handle potential overflows/underflows explicitly

Your answer should be like:
<translated_problem>
new problem
</translated_problem>

<translated_reference_solution>
```csharp
your code
```
</translated_reference_solution>

<demo_test_cases>
```csharp
your code
```
</demo_test_cases>

<full_test_cases>
```csharp
your code
```
</full_test_cases>

Here is the problem, reference solution and test case
[problem]
<<<problem>>>
[problem end]

[reference solution]
<<<code>>>
[reference solution end]

[demo test case]
<<<demo_test>>>
[demo test case end]

[full test case]
<<<full_test>>>
[full test case end]